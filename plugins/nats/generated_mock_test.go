// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LeKovr/mqbridge/plugins/nats (interfaces: Server)

// Package nats_test is a generated GoMock package.
package nats_test

import (
	gomock "github.com/golang/mock/gomock"
	nats_go "github.com/nats-io/nats.go"
	reflect "reflect"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// ChanSubscribe mocks base method
func (m *MockServer) ChanSubscribe(arg0 string, arg1 chan *nats_go.Msg) (*nats_go.Subscription, error) {
	ret := m.ctrl.Call(m, "ChanSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*nats_go.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChanSubscribe indicates an expected call of ChanSubscribe
func (mr *MockServerMockRecorder) ChanSubscribe(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChanSubscribe", reflect.TypeOf((*MockServer)(nil).ChanSubscribe), arg0, arg1)
}

// Close mocks base method
func (m *MockServer) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockServerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServer)(nil).Close))
}

// Publish mocks base method
func (m *MockServer) Publish(arg0 string, arg1 []byte) error {
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockServerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockServer)(nil).Publish), arg0, arg1)
}
